{
  "verbose": 1,
  "id": "Sweden_LUCAS_410-890_40_20231121",
  "name": "Sweden_LUCAS_410-890_40",
  "userId": "thomasg",
  "importVersion": "OSSL-202308",
  "campaign": {
    "campaignId": "OSSL-LUCAS-SE",
    "campaignShortId": "OSSL-LUCAS-SE",
    "campaignType": "laboratory",
    "theme": "soil",
    "product": "diffuse reflectance",
    "units": "fraction",
    "geoRegion": "Sweden"
  },
  "input": {
    "jsonSpectraDataFilePath": "./visnir/OSSL-LUCAS-SE_410-890_40/data-visnir_410-890_40.json",
    "jsonSpectraParamsFilePath": "./visnir/OSSL-LUCAS-SE_410-890_40/params-visnir_410-890_40.json",
    "targetfeaturetransforms": "/Users/thomasgumbricht/docs-local/OSSL2/targettransform/targetfeaturetransforms_all-linear.json",
    "hyperParameterRandomTuning": "Local/path/to/json-ml-modeling/hyper-param-random-tuning.json",
    "hyperParameterExhaustiveTuning": "Local/path/to/json-ml-modeling/hyper-param-exhaustive-tuning.json"
  },
  "output": {
    "prefix": "410-890_linear",
    "setdate": false
  },
  "targetFeatures": [
    "n.tot_usda.a623_w.pct",
    "oc_usda.c729_w.pct"
  ],
  "spectraPreProcess": {
    "filtering": {
      "comment": "filter spectra using moving average, weighted kernel, Salitzy-Golay or Gaussian filter",
      "apply": false,
      "extraction": {
        "mode": "noendpoints",
        "outputBandWidth": 50,
        "beginWaveLength": 450,
        "endWaveLength": 850
      },
      "movingaverage": {
        "kernel": [],
        "mode": "nearest"
      },
      "Gauss": {
        "sigma": 0,
        "mode": "nearest"
      },
      "SavitzkyGolay": {
        "window_length": 5,
        "polyorder": 2,
        "mode": "nearest"
      }
    },
    "multifiltering": {
      "apply": false,
      "beginWaveLength": [
        560,
        630,
        680,
        710,
        760,
        810
      ],
      "endWaveLength": [
        660,
        730,
        780,
        810,
        860,
        910
      ],
      "outputBandWidth": [
        50,
        50,
        50,
        50,
        50,
        50
      ],
      "movingaverage": {
        "kernel": [
          [],
          [],
          [],
          [],
          [],
          []
        ]
      },
      "SavitzkyGolay": {
        "window_length": [
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      "Gauss": {
        "sigma": [
          47,
          47,
          47,
          47,
          47,
          47
        ]
      }
    },
    "duplicateSpectraCombine": "mean"
  },
  "collation": {
    "comment": "dataset collation is automatic, no arguments rquired"
  },
  "datasetSplit": {
    "testSize": 0.3
  },
  "spectraInfoEnhancement": {
    "apply": true,
    "scatterCorrection": {
      "comment": "scattercorr can apply the following: norm-1 (l1), norm-2 (l2) norm-max (max), snv (snv) or msc (msc). If two are given they will be done in series using output from the first as input to the second",
      "apply": false,
      "scaler": [
        "l2"
      ]
    },
    "standardisation": {
      "comment": "remove mean spectral signal and optionallay scale using e.g. standard deviation for each band, for z-score set both meancentring and unitscaling to true",
      "apply": true,
      "paretoscaling": false,
      "poissonscaling": false,
      "meancentring": true,
      "unitscaling": false
    },
    "derivatives": {
      "apply": true,
      "derive": 1,
      "join": false
    },
    "decompose": {
      "comment": "Principal Component Analysis as a spectralpreparation process, you can also use PLSregression, with an inbuild decomposition",
      "apply": false,
      "pca": {
        "apply": true,
        "n_components": 6
      }
    }
  },
  "manualFeatureSelection": {
    "comment": "Manual feature selection overrides other selection alternatives",
    "apply": false,
    "spectra": [
      "675",
      "685",
      "705",
      "715",
      "735"
    ],
    "derivatives": {
      "firstWaveLength": [
        "675"
      ],
      "lastWaveLength": [
        "735"
      ]
    },
    "components": []
  },
  "generalFeatureSelection": {
    "comment": [
      "removes spectra either using global threshold or agglomeration. Only one can be applied. Threshold has precedence if both are set."
    ],
    "apply": false,
    "varianceThreshold": {
      "comment": "the given threshold can represent a threshold (floating number), a percentage (integer followed by '%' [a string]) or a fixed number (integer) of covaraites  to discard",
      "apply": false,
      "onlyShowVarianceList": false,
      "scaler": "None",
      "threshold": "50%",
      "scalerList": [
        "None",
        "MinMaxScaler"
      ]
    }
  },
  "removeOutliers": {
    "comment": "removes sample outliers, to include all covars, set covarList to ['540']",
    "apply": false,
    "covarList": [
      "530"
    ],
    "includeTarget": true,
    "covar4plot": 0,
    "detectorMethodList": [
      "iforest (isolationforest)",
      "ee (eenvelope,ellipticenvelope)",
      "lof (lofactor,localoutlierfactor)",
      "1csvm (1c-svm, oneclasssvm)"
    ],
    "detector": "iforest",
    "contamination": 0.1,
    "random_state": 42
  },
  "specificFeatureAgglomeration": {
    "apply": false,
    "wardClustering": {
      "apply": false,
      "n_clusters": 0,
      "affinity": "euclidean",
      "tuneWardClustering": {
        "apply": true,
        "kfolds": 3,
        "clusters": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    }
  },
  "specificFeatureSelection": {
    "comment": [
      "feature selection using target data and/or regressor"
    ],
    "apply": true,
    "univariateSelection": {
      "apply": true,
      "SelectKBest": {
        "apply": true,
        "n_features": 4
      }
    },
    "permutationSelector": {
      "apply": true,
      "permutationRepeats": 6,
      "n_features_to_select": 4,
      "step": 1
    },
    "RFE": {
      "comment": "n_features_to_select is used as min_features_to_select when in CV mode",
      "apply": true,
      "CV": 0,
      "n_features_to_select": 4,
      "step": 1
    },
    "treeBasedSelector": {
      "apply": false,
      "n_estimators": 50
    }
  },
  "modelling": {
    "apply": true,
    "hyperParameterTuning": {
      "apply": false,
      "fraction": 0.5,
      "nIterSearch": 6,
      "n_best_report": 3,
      "randomTuning": {
        "apply": false
      },
      "exhaustiveTuning": {
        "apply": false
      }
    },
    "featureImportance": {
      "apply": true,
      "reportMaxFeatures": 8,
      "permutationRepeats": 10,
      "n_estimators": 50
    },
    "regressionModels": {
      "OLS": {
        "apply": false,
        "hyperParams": {
          "fit_intercept": false
        }
      },
      "TheilSen": {
        "apply": false,
        "hyperParams": {}
      },
      "Huber": {
        "apply": false,
        "hyperParams": {}
      },
      "KnnRegr": {
        "apply": false,
        "hyperParams": {}
      },
      "DecTreeRegr": {
        "apply": false,
        "hyperParams": {}
      },
      "SVR": {
        "apply": false,
        "hyperParams": {
          "kernel": "linear",
          "C": 1.5,
          "epsilon": 0.05
        }
      },
      "RandForRegr": {
        "apply": true,
        "hyperParams": {
          "n_estimators": 30
        }
      },
      "MLP": {
        "apply": false,
        "hyperParams": {
          "hidden_layer_sizes": [
            100,
            100
          ],
          "max_iter": 200,
          "tol": 0.001,
          "epsilon": 1e-8
        }
      },
      "Cubist": {
        "apply": true,
        "hyperParams": {}
      },
      "PLS": {
        "apply": false,
        "hyperParams": {}
      }
    },
    "modelTests": {
      "apply": true,
      "trainTest": {
        "apply": true
      },
      "Kfold": {
        "apply": false
      }
    }
  }
}
